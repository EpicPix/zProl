def chars AddOperator [$Whitespace] <+>
def chars SubtractOperator [$Whitespace] <->
def chars MultiplyOperator [$Whitespace] <*>
def chars DivideOperator [$Whitespace] </>
def chars ModuloOperator [$Whitespace] <%>
def chars InclusiveOrOperator [$Whitespace] <|>
def chars EqualOperator [$Whitespace] <=><=>
def chars NotEqualOperator [$Whitespace] <!><=>
def inline chars HardCastIndicatorOperator <!>
def CastOperator ( $Type )
def HardCastOperator ( $Type $HardCastIndicatorOperator )

def inline AdditiveOperators:
  $AddOperator
  $SubtractOperator

def inline EqualityOperators:
  $EqualOperator
  $NotEqualOperator

def inline MultiplicativeOperators:
  $MultiplyOperator
  $DivideOperator
  $ModuloOperator

def inline CastOperators:
  $CastOperator
  $HardCastOperator

def inline PostExpression:
  ( $Expression )
  $Integer
  $Boolean
  $String
  $FunctionCall
  $Accessor

def CastExpression $CastOperators $CastExpression
def inline CastExpression $PostExpression

def merge MultiplicativeExpression $CastExpression [ $MultiplicativeOperators $MultiplicativeExpression ]
def merge AdditiveExpression $MultiplicativeExpression [ $AdditiveOperators $AdditiveExpression ]
def merge InclusiveOrExpression $AdditiveExpression [ $InclusiveOrOperator $InclusiveOrExpression ]
def merge EqualsExpression $InclusiveOrExpression [ $EqualityOperators $EqualsExpression ]

def Expression $EqualsExpression

def inline chars ArrayAccessorOpenCharacter [$Whitespace] <[>
def inline chars ArrayAccessorCloseCharacter [$Whitespace] <]>
def ArrayAccessor $ArrayAccessorOpenCharacter $Expression $ArrayAccessorCloseCharacter
def Accessor $Identifier { . $Identifier } { $ArrayAccessor }

def Boolean:
  true
  false

def inline Integer:
  [$Whitespace] $DecimalInteger

def chars DecimalInteger:
  0
  $NonZeroDecimalDigit { $DecimalDigits }

def chars NonZeroDecimalDigit <1-9>
def chars DecimalDigits <0-9>

def chars ArrayCharacters <[><]>

def chars IdentifierChars <a-zA-Z_> { <a-zA-Z0-9_> }
def chars Identifier [$Whitespace] $IdentifierChars
def chars Type [$Whitespace] { $IdentifierChars <.> } $IdentifierChars { $ArrayCharacters }
def chars clean Whitespace < \t\n> { < \t\n> }
def chars StringChars <^\n"> { <^\n"> }
def String " [$StringChars] "
def chars DotWord [$Whitespace] <a-zA-Z_> { <a-zA-Z0-9_.> }

tok Using:
  using $DotWord ;

tok Namespace:
  namespace $DotWord ;

def ReturnStatement:
  return $Expression ;
  return ;

def Argument:
  $Expression

def ArgumentList:
  $Argument {, $Argument}

def FunctionCall:
  $Identifier ( [$ArgumentList] )

def Parameter:
  $Type $Identifier

def ParameterList:
  $Parameter {, $Parameter}

def inline keyword FunctionModifier:
  native
  inline

def FunctionModifiers:
  { $FunctionModifier $Whitespace }

def FunctionCallStatement:
  $Identifier ( [$ArgumentList] ) ;

def AssignmentStatement:
  $Accessor = $Expression ;

def CreateAssignmentStatement:
  $Type $Identifier = $Expression ;

def IfStatement:
  if ( $Expression ) $Code

def WhileStatement:
  while ( $Expression ) $Code

def Statement:
  $ReturnStatement
  $FunctionCallStatement
  $AssignmentStatement
  $CreateAssignmentStatement
  $IfStatement
  $WhileStatement

def inline chars LineCodeChars [$Whitespace] <=> <\>>

def Code:
  \{ {$Statement} \}
  $LineCodeChars $Statement

tok Function:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;

def ClassField:
  $Type $Identifier ;

def ClassMethod:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;

def inline ClassElement:
  $ClassField
  $ClassMethod

tok Class:
  class $Identifier \{ {$ClassElement} \}