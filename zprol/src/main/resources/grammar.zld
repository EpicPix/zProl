lex chars clean Whitespace < \t\n> *< \t\n>
lex chars clean Comment </></> *<^\n>

lex NamespaceKeyword namespace
lex UsingKeyword using
lex ClassKeyword class
lex ReturnKeyword return
lex IfKeyword if
lex ElseKeyword else
lex WhileKeyword while
lex BreakKeyword break
lex ContinueKeyword continue

lex TrueKeyword true
lex FalseKeyword false
lex NullKeyword null
lex VoidKeyword void
lex BoolKeyword bool

lex NativeKeyword native

lex ConstKeyword const

lex Semicolon ;
lex OpenBracket [
lex CloseBracket ]
lex OpenBrace {
lex CloseBrace }
lex OpenParen (
lex CloseParen )
lex LineCodeChars =>

lex chars DecimalInteger <1-9> *<0-9>
lex chars HexInteger <0><x><0-9a-fA-F> *<0-9a-fA-F>
lex Zero 0
lex chars Identifier <a-zA-Z_> *<a-zA-Z0-9_>
lex chars String <"> *<^"\n> <">

lex AccessorOperator .
lex CommaOperator ,
lex AddOperator +
lex SubtractOperator -
lex MultiplyOperator *
lex DivideOperator /
lex ModuloOperator %
lex InclusiveOrOperator |
lex AndOperator &
lex ShiftLeftOperator <<
lex ShiftRightOperator >>
lex EqualOperator ==
lex NotEqualOperator !=
lex LessEqualThanOperator <=
lex LessThanOperator <
lex GreaterEqualThanOperator >=
lex GreaterThanOperator >
lex AssignOperator =
lex HardCastIndicatorOperator !

def WhitespaceElement $Whitespace|$Comment
def Whitespace WhitespaceElement WhitespaceElement*

def CastOperator '(' Type Whitespace? ')'
def HardCastOperator '(' Type Whitespace? '!' Whitespace? ')'

def inline CastOperators CastOperator|HardCastOperator

def inline PostExpression ('(' Whitespace? Expression Whitespace? ')')|String|Null|HexInteger|DecimalInteger|Boolean|Accessor

def CastExpression CastOperators Whitespace? CastExpression
def inline CastExpression PostExpression

def merge MultiplicativeExpression Whitespace? CastExpression (Whitespace? '*'|'/'|'%' Whitespace? MultiplicativeExpression)?
def merge AdditiveExpression MultiplicativeExpression (Whitespace? '+'|'-' Whitespace? AdditiveExpression)?
def merge CompareExpression AdditiveExpression (Whitespace? '<='|'<'|'>='|'>' Whitespace? CompareExpression)?
def merge EqualsExpression CompareExpression (Whitespace? '=='|'!=' Whitespace? EqualsExpression)?
def merge ShiftExpression EqualsExpression (Whitespace? '<<'|'>>' Whitespace? ShiftExpression)?
def merge InclusiveOrExpression ShiftExpression (Whitespace? '|' Whitespace? InclusiveOrExpression)?
def merge InclusiveAndExpression InclusiveOrExpression (Whitespace? '&' Whitespace? InclusiveAndExpression)?

def Expression InclusiveAndExpression


def Argument Expression
def ArgumentList Argument (Whitespace? ',' Whitespace? Argument)*
def FunctionInvocation Whitespace? '(' ArgumentList? Whitespace? ')'

def FunctionInvocationAccessor Whitespace? $Identifier FunctionInvocation
def inline FunctionInvocationAccessor Whitespace? $Identifier

def ArrayAccessor Whitespace? '[' Whitespace? Expression Whitespace? ']'
def AccessorElement:
  Whitespace? '.' FunctionInvocationAccessor
  ArrayAccessor

def Accessor FunctionInvocationAccessor AccessorElement*
def String $String
def Boolean 'true'|'false'
def Null 'null'

def HexInteger $HexInteger
def DecimalInteger '0'|$DecimalInteger

def ArrayCharacters '[' ']'

def Type:
  (Whitespace? $Identifier Whitespace? '.')* Whitespace? $Identifier ArrayCharacters*
  Whitespace? 'bool' ArrayCharacters*
  Whitespace? 'void'
def NamespaceIdentifier Whitespace? $Identifier ('.' $Identifier)*

tok Whitespace Whitespace

tok Using Whitespace? 'using' NamespaceIdentifier Whitespace? ';'
tok Namespace Whitespace? 'namespace' NamespaceIdentifier Whitespace? ';'

def Parameter Whitespace? Type Whitespace? $Identifier
def ParameterList Whitespace? Parameter (Whitespace? ',' Parameter)*

def inline FunctionModifier Whitespace? 'native'
def FunctionModifiers FunctionModifier*

def ReturnStatement 'return' (Whitespace? Expression)? Whitespace? ';'
def BreakStatement 'break' Whitespace? ';'
def ContinueStatement 'continue' Whitespace? ';'
def AssignmentStatement Accessor Whitespace? '=' Whitespace? Expression Whitespace? ';'
def CreateAssignmentStatement Type Whitespace? $Identifier Whitespace? '=' Whitespace? Expression Whitespace? ';'
def IfStatement 'if' Whitespace? '(' Whitespace? Expression Whitespace? ')' Code (Whitespace? ElseStatement)?
def ElseStatement 'else' Code
def WhileStatement 'while' Whitespace? '(' Whitespace? Expression Whitespace? ')' Code
def AccessorStatement Accessor Whitespace? ';'

def Statement Whitespace? ReturnStatement|BreakStatement|ContinueStatement|AssignmentStatement|CreateAssignmentStatement|IfStatement|WhileStatement|AccessorStatement

def Code Whitespace? ('{' Statement* Whitespace? '}')|('=>' Statement)

tok Function FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? '(' ParameterList? Whitespace? ')' Whitespace? ';'|Code

tok Field:
  'const' Type Whitespace? $Identifier Whitespace? '=' Whitespace? Expression Whitespace? ';'
  Type Whitespace? $Identifier Whitespace? ';'


tok Class 'class' Whitespace? $Identifier Whitespace? '{' (Whitespace? ClassElement)* Whitespace? '}'
def ClassField Type Whitespace? $Identifier Whitespace? ';'
def ClassMethod FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? '(' ParameterList? Whitespace? ')' Whitespace? ';'|Code

def inline ClassElement ClassMethod|ClassField