def chars AddOperator [$Whitespace] <+>
def chars SubtractOperator [$Whitespace] <->
def chars MultiplyOperator [$Whitespace] <*>
def chars DivideOperator [$Whitespace] </>
def chars ModuloOperator [$Whitespace] <%>
def chars InclusiveOrOperator [$Whitespace] <|>
def chars AndOperator [$Whitespace] <&>
def chars ShiftLeftOperator [$Whitespace] <\<><\<>
def chars ShiftRightOperator [$Whitespace] <\>><\>>
def chars EqualOperator [$Whitespace] <=><=>
def chars NotEqualOperator [$Whitespace] <!><=>
def chars LessThanOperator [$Whitespace] <\<>
def chars LessEqualThanOperator [$Whitespace] <\<><=>
def chars GreaterThanOperator [$Whitespace] <\>>
def chars GreaterEqualThanOperator [$Whitespace] <\>><=>
def inline chars HardCastIndicatorOperator <!>
def CastOperator ( $Type )
def HardCastOperator ( $Type $HardCastIndicatorOperator )

def inline AdditiveOperators:
  $AddOperator
  $SubtractOperator

def inline EqualityOperators:
  $EqualOperator
  $NotEqualOperator

def inline CompareOperators:
  $LessEqualThanOperator
  $LessThanOperator
  $GreaterEqualThanOperator
  $GreaterThanOperator

def inline ShiftOperators:
  $ShiftLeftOperator
  $ShiftRightOperator

def inline MultiplicativeOperators:
  $MultiplyOperator
  $DivideOperator
  $ModuloOperator

def inline CastOperators:
  $CastOperator
  $HardCastOperator
def error CastOperators Expected ')' </> ( $Type [$HardCastIndicatorOperator] $AnyCharButCloseP

def inline PostExpression:
  ( $Expression )
  $Integer
  $Boolean
  $String
  $Null
  $Accessor

def CastExpression $CastOperators $CastExpression
def inline CastExpression $PostExpression

def merge MultiplicativeExpression $CastExpression [ $MultiplicativeOperators $MultiplicativeExpression ]
def merge AdditiveExpression $MultiplicativeExpression [ $AdditiveOperators $AdditiveExpression ]
def merge CompareExpression $AdditiveExpression [ $CompareOperators $CompareExpression ]
def merge EqualsExpression $CompareExpression [ $EqualityOperators $EqualsExpression ]
def merge ShiftExpression $EqualsExpression [ $ShiftOperators $ShiftExpression ]
def merge InclusiveOrExpression $ShiftExpression [ $InclusiveOrOperator $InclusiveOrExpression ]
def merge InclusiveAndExpression $InclusiveOrExpression [ $AndOperator $InclusiveAndExpression ]

def Expression $InclusiveAndExpression


def Argument:
  $Expression

def ArgumentList:
  $Argument {, $Argument}

def FunctionInvocation:
  ( [$ArgumentList] )

def inline chars ArrayAccessorOpenCharacter [$Whitespace] <[>
def inline chars ArrayAccessorCloseCharacter [$Whitespace] <]>
def ArrayAccessor $ArrayAccessorOpenCharacter $Expression $ArrayAccessorCloseCharacter
def AccessorElement:
  . $Identifier [$FunctionInvocation]
  $ArrayAccessor
def error AccessorElement Expected an Identifier </> . [$Whitespace] $AnyChar

def Accessor $Identifier [$FunctionInvocation] { $AccessorElement }

def Boolean:
  true
  false

def Null null

def inline Integer:
  [$Whitespace] $DecimalInteger

def chars DecimalInteger:
  0
  $NonZeroDecimalDigit { $DecimalDigits }
def error DecimalInteger Expected a DecimalInteger </> $NonZeroDecimalDigit [$Whitespace] $AnyChar

def chars NonZeroDecimalDigit <1-9>
def chars DecimalDigits <0-9>

def chars ArrayCharacters <[><]>

def chars AnyChar <^>
def chars AnyCharButClose <^}>
def chars AnyCharButOpen <^{>
def chars AnyCharButOpenP <^(>
def chars AnyCharButCloseP <^)>
def chars AnyCharButEquals <^=>
def chars AnyCharButSemicolon <^;>
def chars AnyCharButQuotes <^">

def chars IdentifierChars <a-zA-Z_> { <a-zA-Z0-9_> }
def chars Identifier [$Whitespace] $IdentifierChars
def chars Type [$Whitespace] { $IdentifierChars <.> } $IdentifierChars { $ArrayCharacters }
def chars clean Whitespace { < \t\n> }
def chars StringChars <^\n"> { <^\n"> }
def String " [$StringChars] "
def error String Expected '"' </> " [$StringChars] $AnyCharButQuotes
def chars DotWord [$Whitespace] <a-zA-Z_> { <a-zA-Z0-9_.> }

tok Using:
  using $DotWord ;
  $UsingErrors

def error UsingErrors:
  Expected a ';' </> using $DotWord [$Whitespace] $AnyChar
  Expected a namespace </> using [$Whitespace] [$AnyChar]

tok Namespace:
  namespace $DotWord ;
  $NamespaceErrors

def error NamespaceErrors:
  Expected a ';' </> namespace $DotWord [$Whitespace] $AnyChar
  Expected a namespace </> namespace [$Whitespace] [$AnyChar]

def ReturnStatement return [$Expression] ;
def error ReturnStatement Expected a ';' </> return [$Expression]

def Parameter $Type $Identifier
def error Parameter Expected an Identifier </> $Type [$Whitespace] [$AnyChar]

def ParameterList:
  $Parameter {, $Parameter}

def inline keyword FunctionModifier:
  native

def FunctionModifiers:
  { $FunctionModifier [$Whitespace] }

def AccessorStatement $Accessor ;

def AssignmentStatement:
  $Accessor = $Expression ;
def error AssignmentStatement Expected ';' </> $Accessor = $Expression $AnyChar

def CreateAssignmentStatement:
  $Type $Identifier = $Expression ;
def error CreateAssignmentStatement:
  Expected '=' </> $Type $Identifier $AnyCharButEquals
  Expected ';' </> $Type $Identifier = $Expression $AnyChar

def IfStatement:
  if ( $Expression ) $Code [ $ElseStatement ]
def error IfStatement:
  Expected '(' </> if [$Whitespace] $AnyCharButOpenP
  Expected ')' </> if ( $Expression [$Whitespace] $AnyCharButCloseP

def ElseStatement:
  else $Code

def WhileStatement:
  while ( $Expression ) $Code
def error WhileStatement:
  Expected '(' </> while [$Whitespace] $AnyCharButOpenP
  Expected ')' </> while ( $Expression [$Whitespace] $AnyCharButCloseP

def Statement:
  $ReturnStatement
  $AssignmentStatement
  $CreateAssignmentStatement
  $IfStatement
  $WhileStatement
  $AccessorStatement
def error Statement Not a Statement </> [$Whitespace] $AnyCharButClose

def inline chars LineCodeChars [$Whitespace] <=> <\>>

def Code:
  \{ {$Statement} \}
  $LineCodeChars $Statement
def error Code:
  Expected code </> \{
  Expected code </> $LineCodeChars

tok Function:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code

def error FieldErrors Expected ';' </> $Type $Identifier [$Whitespace] $AnyCharButOpen

tok Field:
  $Type $Identifier ;
  $FieldErrors

def ClassField:
  $Type $Identifier ;
def error ClassField Expected ';' </> $Type $Identifier [$Whitespace] $AnyChar

def ClassMethod:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code

def inline ClassElement:
  $ClassMethod
  $ClassField
def error ClassElement Expected a Field or a Method </> [$Whitespace] $AnyCharButClose

tok Class:
  class $Identifier \{ {$ClassElement} \}