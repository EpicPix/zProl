lex chars clean Whitespace < \t\n> *< \t\n>
lex chars clean Comment </></> *<^\n>

lex NamespaceKeyword namespace
lex UsingKeyword using
lex ClassKeyword class
lex ReturnKeyword return
lex IfKeyword if
lex ElseKeyword else
lex WhileKeyword while
lex BreakKeyword break
lex ContinueKeyword continue

lex TrueKeyword true
lex FalseKeyword false
lex NullKeyword null
lex VoidKeyword void
lex BoolKeyword bool

lex NativeKeyword native

lex Semicolon ;
lex OpenBracket [
lex CloseBracket ]
lex OpenBrace {
lex CloseBrace }
lex OpenParen (
lex CloseParen )
lex LineCodeChars =>

lex chars DecimalInteger <1-9> *<0-9>
lex chars HexInteger <0><x><0-9a-fA-F> *<0-9a-fA-F>
lex Zero 0
lex chars Identifier <a-zA-Z_> *<a-zA-Z0-9_>
lex chars String <"> *<^"\n> <">

lex AccessorOperator .
lex CommaOperator ,
lex AddOperator +
lex SubtractOperator -
lex MultiplyOperator *
lex DivideOperator /
lex ModuloOperator %
lex InclusiveOrOperator |
lex AndOperator &
lex ShiftLeftOperator <<
lex ShiftRightOperator >>
lex EqualOperator ==
lex NotEqualOperator !=
lex LessEqualThanOperator <=
lex LessThanOperator <
lex GreaterEqualThanOperator >=
lex GreaterThanOperator >
lex AssignOperator =
lex HardCastIndicatorOperator !

def WhitespaceElement:
  $Whitespace
  $Comment
def Whitespace WhitespaceElement{WhitespaceElement}

def CastOperator $OpenParen Type Whitespace? $CloseParen
def HardCastOperator $OpenParen Type Whitespace? $HardCastIndicatorOperator Whitespace? $CloseParen

def inline AdditiveOperators:
  $AddOperator
  $SubtractOperator

def inline EqualityOperators:
  $EqualOperator
  $NotEqualOperator

def inline CompareOperators:
  $LessEqualThanOperator
  $LessThanOperator
  $GreaterEqualThanOperator
  $GreaterThanOperator

def inline ShiftOperators:
  $ShiftLeftOperator
  $ShiftRightOperator

def inline MultiplicativeOperators:
  $MultiplyOperator
  $DivideOperator
  $ModuloOperator

def inline CastOperators:
  CastOperator
  HardCastOperator

def inline PostExpression:
  $OpenParen Whitespace? Expression Whitespace? $CloseParen
  String
  Null
  Integer
  Boolean
  Accessor

def CastExpression CastOperators Whitespace? CastExpression
def inline CastExpression PostExpression

def merge MultiplicativeExpression Whitespace? CastExpression [ Whitespace? MultiplicativeOperators Whitespace? MultiplicativeExpression ]
def merge AdditiveExpression MultiplicativeExpression [ Whitespace? AdditiveOperators Whitespace? AdditiveExpression ]
def merge CompareExpression AdditiveExpression [ Whitespace? CompareOperators Whitespace? CompareExpression ]
def merge EqualsExpression CompareExpression [ Whitespace? EqualityOperators Whitespace? EqualsExpression ]
def merge ShiftExpression EqualsExpression [ Whitespace? ShiftOperators Whitespace? ShiftExpression ]
def merge InclusiveOrExpression ShiftExpression [ Whitespace? $InclusiveOrOperator Whitespace? InclusiveOrExpression ]
def merge InclusiveAndExpression InclusiveOrExpression [ Whitespace? $AndOperator Whitespace? InclusiveAndExpression ]

def Expression InclusiveAndExpression


def Argument Whitespace? Expression
def ArgumentList Argument {Whitespace? $CommaOperator Argument}
def FunctionInvocation Whitespace? $OpenParen ArgumentList? Whitespace? $CloseParen

def FunctionInvocationAccessor Whitespace? $Identifier FunctionInvocation
def inline FunctionInvocationAccessor Whitespace? $Identifier

def inline ArrayAccessorOpenCharacter Whitespace? $OpenBracket
def inline ArrayAccessorCloseCharacter Whitespace? $CloseBracket
def ArrayAccessor ArrayAccessorOpenCharacter Whitespace? Expression ArrayAccessorCloseCharacter
def AccessorElement:
  Whitespace? $AccessorOperator FunctionInvocationAccessor
  ArrayAccessor

def Accessor FunctionInvocationAccessor AccessorElement*

def String $String

def Boolean:
  $TrueKeyword
  $FalseKeyword

def Null $NullKeyword

def inline Integer:
  HexInteger
  DecimalInteger

def HexInteger $HexInteger
def DecimalInteger:
  $Zero
  $DecimalInteger

def ArrayCharacters ArrayAccessorOpenCharacter ArrayAccessorCloseCharacter

def Type:
  { Whitespace? $Identifier Whitespace? $AccessorOperator } Whitespace? $Identifier ArrayCharacters*
  Whitespace? $BoolKeyword ArrayCharacters*
  Whitespace? $VoidKeyword
def NamespaceIdentifier Whitespace? $Identifier {$AccessorOperator $Identifier}

tok Whitespace Whitespace

tok Using Whitespace? $UsingKeyword NamespaceIdentifier Whitespace? $Semicolon
tok Namespace Whitespace? $NamespaceKeyword NamespaceIdentifier Whitespace? $Semicolon

def Parameter Whitespace? Type Whitespace? $Identifier
def ParameterList Whitespace? Parameter {Whitespace? $CommaOperator Parameter}

def inline FunctionModifier Whitespace? $NativeKeyword
def FunctionModifiers FunctionModifier*

def ReturnStatement Whitespace? $ReturnKeyword [Whitespace? Expression] Whitespace? $Semicolon
def BreakStatement Whitespace? $BreakKeyword Whitespace? $Semicolon
def ContinueStatement Whitespace? $ContinueKeyword Whitespace? $Semicolon
def AssignmentStatement Accessor Whitespace? $AssignOperator Whitespace? Expression Whitespace? $Semicolon
def CreateAssignmentStatement Type Whitespace? $Identifier Whitespace? $AssignOperator Whitespace? Expression Whitespace? $Semicolon
def IfStatement Whitespace? $IfKeyword Whitespace? $OpenParen Whitespace? Expression Whitespace? $CloseParen Code ElseStatement?
def ElseStatement Whitespace? $ElseKeyword Code
def WhileStatement Whitespace? $WhileKeyword Whitespace? $OpenParen Whitespace? Expression Whitespace? $CloseParen Code
def AccessorStatement Accessor Whitespace? $Semicolon

def Statement:
  ReturnStatement
  BreakStatement
  ContinueStatement
  AssignmentStatement
  CreateAssignmentStatement
  IfStatement
  WhileStatement
  AccessorStatement

def Code:
  Whitespace? $OpenBrace Statement* Whitespace? $CloseBrace
  Whitespace? $LineCodeChars Statement

tok Function:
  FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? $OpenParen ParameterList? Whitespace? $CloseParen Whitespace? $Semicolon
  FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? $OpenParen ParameterList? Whitespace? $CloseParen Code

tok Field Type Whitespace? $Identifier Whitespace? $Semicolon


tok Class $ClassKeyword Whitespace? $Identifier Whitespace? $OpenBrace {Whitespace? ClassElement} Whitespace? $CloseBrace
def ClassField Type Whitespace? $Identifier Whitespace? $Semicolon
def ClassMethod:
  FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? $OpenParen ParameterList? Whitespace? $CloseParen Whitespace? $Semicolon
  FunctionModifiers Whitespace? Type Whitespace? $Identifier Whitespace? $OpenParen ParameterList? Whitespace? $CloseParen Code

def inline ClassElement:
  ClassMethod
  ClassField