// New approach commented due to it still being slow
//
// def chars AddOperator [$Whitespace] <+>
// def chars SubtractOperator [$Whitespace] <->
// def chars MultiplyOperator [$Whitespace] <*>
// def chars DivideOperator [$Whitespace] </>
// def chars ModuloOperator [$Whitespace] <%>
// def chars InclusiveOrOperator [$Whitespace] <|>
// def inline chars HardCastIndicatorOperator <!>
// def CastOperator ( $Type )
// def HardCastOperator ( $Type $HardCastIndicatorOperator )
//
// def inline AdditiveOperators:
//   $AddOperator
//   $SubtractOperator
//
// def inline MultiplicativeOperators:
//   $MultiplyOperator
//   $DivideOperator
//   $ModuloOperator
//
// def inline CastOperators:
//   $CastOperator
//   $HardCastOperator
//
// def PostExpression:
//   $Integer
//   $Boolean
//   $String
//   $FunctionCall
//   $Accessor
//
// def CastExpression $CastOperators $PostExpression
// def inline CastExpression $PostExpression
//
// def flip MultiplicativeExpression $MultiplicativeExpression $MultiplicativeOperators $CastExpression
// def inline MultiplicativeExpression $CastExpression
//
// def flip AdditiveExpression $AdditiveExpression $AdditiveOperators $MultiplicativeExpression
// def inline AdditiveExpression $MultiplicativeExpression
//
// def flip InclusiveOrExpression $InclusiveOrExpression $InclusiveOrOperator $AdditiveExpression
// def inline InclusiveOrExpression $AdditiveExpression
//
// def Expression:
//   $InclusiveOrExpression


def Expression:
  $ExpressionCast [$ExpressionType]

def ExpressionParenthesis:
  ( $ExpressionCast $ExpressionType )

def inline ExpressionType:
  [$Whitespace] $Operator $ExpressionCast [$ExpressionType]

def Assignment:
  $Identifier = $Expression

def inline ExpressionCast $ExpressionCallables
def ExpressionCast:
  $HardCastOperator $Expression
  $CastOperator $Expression

def inline ExpressionCallables:
  $Boolean
  $Integer
  $ExpressionParenthesis
  $Assignment
  $FunctionCall
  $Accessor
  $String

def inline AccessorCallables:
  $Identifier

def CastOperator:
  ( $Type )

def HardCastOperator:
  ( $Type ! )

def Accessor $AccessorCallables {. $AccessorCallables}

def Boolean:
  true
  false

def inline Integer:
  [$Whitespace] $DecimalInteger

def chars DecimalInteger:
  0
  $NonZeroDecimalDigit { $DecimalDigits }

def chars NonZeroDecimalDigit <1-9>
def chars DecimalDigits <0-9>

def chars IdentifierChars <a-zA-Z_> { <a-zA-Z0-9_> }
def chars Identifier [$Whitespace] $IdentifierChars
def chars Type [$Whitespace] { $IdentifierChars <.> } $IdentifierChars
def chars clean Whitespace < \t\n> { < \t\n> }
def chars StringChars <^\n"> { <^\n"> }
def String " [$StringChars] "
def chars DotWord [$Whitespace] <a-zA-Z_> { <a-zA-Z0-9_.> }
def chars Operator:
  <\>\>>
  <<<>
  <%>
  <+>
  <->
  <*>
  </>
  <%>
  <|>
  <=><=>

tok Using:
  using $DotWord ;

tok Namespace:
  namespace $DotWord ;

def ReturnStatement:
  return $Expression ;
  return ;

def Argument:
  $Expression

def ArgumentList:
  $Argument {, $Argument}

def FunctionCall:
  $Identifier ( [$ArgumentList] )

def Parameter:
  $Type $Identifier

def ParameterList:
  $Parameter {, $Parameter}

def inline keyword FunctionModifier:
  native
  inline

def FunctionModifiers:
  { $FunctionModifier $Whitespace }

def FunctionCallStatement:
  $Identifier ( [$ArgumentList] ) ;

def AssignmentStatement:
  $Accessor = $Expression ;

def CreateAssignmentStatement:
  $Type $Identifier = $Expression ;

def Statement:
  $ReturnStatement
  $FunctionCallStatement
  $AssignmentStatement
  $CreateAssignmentStatement

def inline chars LineCodeChars [$Whitespace] <=> <\>>

def Code:
  \{ {$Statement} \}
  $LineCodeChars $Statement

tok Function:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;

def ClassField:
  $Type $Identifier ;

def ClassMethod:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;

def inline ClassElement:
  $ClassField
  $ClassMethod

tok Class:
  class $Identifier \{ {$ClassElement} \}