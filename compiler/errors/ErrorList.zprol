namespace zprol.compiler.errors;

using zprol.compiler.errors;
using zprol.lang.collection;
using zprol.lang.linux.amd64;
using zprol.lang.memory;

class ErrorList {

    List errors;

    void add_error(uint64 errorCode) {
        ErrorListItem item = (ErrorListItem!) malloc(56);
        item.errorCode = errorCode;
        item.fileContent = null;
        item.filePath = null;
        item.startOffset = 0;
        item.endOffset = 0;
        item.formatType = FORMAT_NONE;
        item.formatInfo = null;
        errors.add((uint64!) item);
    }

    ErrorListFile create_list_for_file(String fileContent, String filePath) {
        ErrorListFile file = (ErrorListFile!) malloc(24);
        file.errorList = this;
        file.fileContent = fileContent;
        file.filePath = filePath;
        return file;
    }

}

class ErrorListFile {

    ErrorList errorList;
    String fileContent;
    String filePath;

    void add_error(uint64 errorCode, ulong startOffset, ulong endOffset, uint64 formatType, String format) {
        ErrorListItem item = (ErrorListItem!) malloc(56);
        item.errorCode = errorCode;
        item.fileContent = fileContent;
        item.filePath = filePath;
        item.startOffset = startOffset;
        item.endOffset = endOffset;
        item.formatType = formatType;
        item.formatInfo = format;
        errorList.errors.add((uint64!) item);
    }

    void add_error(uint64 errorCode, ulong startOffset, ulong endOffset, uint64 formatType) =>
        add_error(errorCode, startOffset, endOffset, formatType, null);

}

void showPointer(long number) {
    int i = 15;
    while(i >= 0) {
        showHexDigit((number >> (i * 4)) & 0xf);
        i = i - 1;
    }
}

void showHexDigit(long digit) {
    if(digit == 0) => stdout("0");
    else => if(digit == 1) => stdout("1");
    else => if(digit == 2) => stdout("2");
    else => if(digit == 3) => stdout("3");
    else => if(digit == 4) => stdout("4");
    else => if(digit == 5) => stdout("5");
    else => if(digit == 6) => stdout("6");
    else => if(digit == 7) => stdout("7");
    else => if(digit == 8) => stdout("8");
    else => if(digit == 9) => stdout("9");
    else => if(digit == 10) => stdout("a");
    else => if(digit == 11) => stdout("b");
    else => if(digit == 12) => stdout("c");
    else => if(digit == 13) => stdout("d");
    else => if(digit == 14) => stdout("e");
    else => if(digit == 15) => stdout("f");
}

class ErrorListItem {

    uint64 errorCode;

    String fileContent;
    String filePath;
    ulong startOffset;
    ulong endOffset;

    uint64 formatType;
    String formatInfo;

    void print() {
        stdout(error_code_str(errorCode));
        stdout(": ");
        if(filePath != null) {
            stdout(filePath);
            // TODO: Seperate offset to line and row, and print it like `filePath:line:row`
            stdout(" ");
        }
        stdout(error_code_message(errorCode));
        stdout("\n");
        if(formatType != FORMAT_NONE) {
            uint64 i = 0;
            uint64 startLineIndex = 0;
            uint64 line = 0;
            bool isLineStart = false;
            bool foundLine = false;
            while(i < fileContent.length) {
                if(isLineStart) {
                    startLineIndex = i;
                    line = line + 1;
                    isLineStart = false;
                }
                if(fileContent.bytes[i] == 0xa) {
                    if(foundLine) => break;
                    isLineStart = true;
                }
                if(i == startOffset) => foundLine = true;
                i = i + 1;
            }

            byte[] lineStart = (byte[]!) (((ulong!) fileContent.bytes) + startLineIndex);
            ulong lineLength = i - startLineIndex;

            if(formatType == FORMAT_HIGHLIGHT) {
                stdout("~ ");
                stdout(lineStart, lineLength);
                stdout("\n");
                uint64 pad = startOffset - startLineIndex;

                stdout("  ");
                uint64 j = 0;
                while(j < pad) {
                    stdout(" ");
                    j = j + 1;
                }
                uint64 k = 0;
                uint64 len = endOffset - startOffset;
                while(k < len) {
                    stdout("^");
                    k = k + 1;
                }
                stdout("\n");
            }else {
                stdout("- ");
                stdout(lineStart, lineLength);
                stdout("\n");

                if(formatType == FORMAT_REPLACE) {
                    stdout("+ ");
                    stdout(lineStart, startOffset - startLineIndex);
                    stdout(formatInfo);
                    stdout((byte[]!) (((ulong!) fileContent.bytes) + endOffset), i - endOffset);
                    stdout("\n");
                }else => if(formatType == FORMAT_REPLACE_LINE) {
                    stdout("+ ");
                    stdout(formatInfo);
                    stdout("\n");
                }
            }
        }
    }

}

const uint64 FORMAT_NONE = 0;
const uint64 FORMAT_HIGHLIGHT = 1;
const uint64 FORMAT_REPLACE = 2;
const uint64 FORMAT_REPLACE_LINE = 3;

ErrorList create_error_list() {
    List list = List_new();
    ErrorList errors = (ErrorList!) malloc(8);
    errors.errors = list;
    return errors;
}