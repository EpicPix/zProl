namespace zprol.compiler.lexer;

using zprol.compiler.errors;
using zprol.compiler.lexer.utils;
using zprol.compiler.tokens;
using zprol.lang.linux.amd64;
using zprol.lang.memory;
using zprol.lang.io;
using zprol.lang;

TokenList lex(String inContent, ErrorListFile errors) {
    TokenList tokens = create_token_list();
    byte[] contents = inContent.bytes;
    long length = inContent.length;
    // no utf8 support, iterating byte by byte
    ulong index = 0;
    while(index < length) {
        ulong start = index;
        if(is_alphabet_or_underscore(contents[index])) {
            index = index + 1;
            while(index < length) {
                if(is_alphanumeric_or_underscore(contents[index]) == false) {
                    break;
                }
                index = index + 1;
            }
            tokens.add(create_simple_token(get_token_type_word((byte[]!) ((ulong!) contents + start), index-start), start, index));
            continue;
        }else {
            if(contents[index] == 0x30) {
                if(index + 1 < length) {
                    if((contents[index + 1] | 0x20) == 0x78) {
                        index = index + 2;
                        bool validHex = true;
                        while(index < length) {
                            if(is_alphanumeric_or_underscore(contents[index]) == false) {
                                break;
                            }
                            if(is_hexadecimal(contents[index]) == false) {
                                validHex = false;
                            }
                            index = index + 1;
                        }
                        if(validHex == false) {
                            errors.add_error(1000, start, index, FORMAT_HIGHLIGHT);
                            tokens.add(create_simple_token(TokenInvalid, start, index));
                        }else {
                            tokens.add(create_simple_token(TokenNumber, start, index));
                        }
                    }else => if((contents[index + 1] | 0x20) == 0x62) {
                        index = index + 2;
                        bool validBin = true;
                        while(index < length) {
                            if(is_alphanumeric_or_underscore(contents[index]) == false) {
                                break;
                            }
                            if(is_binary(contents[index]) == false) {
                                validBin = false;
                            }
                            index = index + 1;
                        }
                        if(validBin == false) {
                            errors.add_error(1001, start, index, FORMAT_HIGHLIGHT);
                            tokens.add(create_simple_token(TokenInvalid, start, index));
                        }else {
                            tokens.add(create_simple_token(TokenNumber, start, index));
                        }
                    } else {
                        index = index + 1;
                        bool validNum = true;
                        while(index < length) {
                            if(is_alphanumeric_or_underscore(contents[index]) == false) {
                                break;
                            }
                            if(is_octal(contents[index]) == false) {
                                validNum = false;
                            }
                            index = index + 1;
                        }
                        if(index - start == 1) { // zero
                            tokens.add(create_simple_token(TokenNumber, start, index));
                        }else { // octal number
                            if(validNum == false) {
                                errors.add_error(1002, start, index, FORMAT_HIGHLIGHT);
                                tokens.add(create_simple_token(TokenInvalid, start, index));
                            }else {
                                tokens.add(create_simple_token(TokenNumber, start, index));
                            }
                        }
                    }
                }
                continue;
            }else => if(is_digit(contents[index])) {
                index = index + 1;
                bool validNum = true;
                while(index < length) {
                    if(is_alphanumeric_or_underscore(contents[index]) == false) {
                        break;
                    }
                    if(is_digit(contents[index]) == false) {
                        validNum = false;
                    }
                    index = index + 1;
                }
                if(validNum == false) {
                    errors.add_error(1003, start, index, FORMAT_HIGHLIGHT);
                    tokens.add(create_simple_token(TokenInvalid, start, index));
                }else {
                    tokens.add(create_simple_token(TokenNumber, start, index));
                }
                continue;
            }else => if(contents[index] == 0x22) {
                index = index + 1;
                ulong strValueLen = 0;
                ulong startStr = index;
                bool has_errors = false;
                while(index < length) {
                    if(contents[index] == 0x22) {
                        index = index + 1;
                        break;
                    }else => if(contents[index] == 0x5C) {
                        if(index + 1 > length) {
                            errors.add_error(1004, start, index, FORMAT_HIGHLIGHT);
                            return tokens;
                        }
                        index = index + 1;
                        byte next = contents[index];
                        if(is_newline(next)) {
                            errors.add_error(1005, start, index - 1, FORMAT_HIGHLIGHT);
                            has_errors = true;
                        }else => if(is_valid_escape_character(next)) {
                            strValueLen = strValueLen + 1;
                        }else {
                            errors.add_error(1006, index - 1, index, FORMAT_REPLACE, "");
                            has_errors = true;
                        }
                        continue;
                    }else => if(is_newline(contents[index])) {
                        errors.add_error(1005, start, index - 1, FORMAT_HIGHLIGHT);
                        has_errors = true;
                    }
                    strValueLen = strValueLen + 1;
                    index = index + 1;
                }
                if(has_errors == false) {
                    index = startStr;
                    String str = (String!) malloc(16 + strValueLen);
                    str.length = strValueLen;
                    str.bytes = (byte[]!) ((long!) str + 16);
                    ulong strIndex = 0;
                    while(index < length) {
                        if(contents[index] == 0x22) {
                            index = index + 1;
                            break;
                        }else => if(contents[index] == 0x5C) {
                            index = index + 1;
                            byte next = contents[index];
                            if(is_valid_escape_character(next)) {
                                index = index + 1;
                                if(next == 0x5C) {
                                    str.bytes[strIndex] = 0x5C;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x6E) {
                                    str.bytes[strIndex] = 0x0A;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x72) {
                                    str.bytes[strIndex] = 0x0D;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x66) {
                                    str.bytes[strIndex] = 0x0C;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x27) {
                                    str.bytes[strIndex] = 0x27;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x74) {
                                    str.bytes[strIndex] = 0x09;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x62) {
                                    str.bytes[strIndex] = 0x08;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x30) {
                                    str.bytes[strIndex] = 0x00;
                                    strIndex = strIndex + 1;
                                }
                                if(next == 0x22) {
                                    str.bytes[strIndex] = 0x22;
                                    strIndex = strIndex + 1;
                                }
                            }
                            continue;
                        }
                        str.bytes[strIndex] = contents[index];
                        index = index + 1;
                        strIndex = strIndex + 1;
                    }
                    tokens.add(create_string_token(TokenString, start, index, str));
                }else {
                    tokens.add(create_simple_token(TokenInvalid, start, index));
                }
                continue;
            }else => if(is_whitespace(contents[index])) {
                index = index + 1;
                while(index < length) {
                    if(is_whitespace(contents[index]) == false) {
                        break;
                    }
                    index = index + 1;
                }
                tokens.add(create_simple_token(TokenWhitespace, start, index));
                continue;
            }else {
                if(contents[index] == 0x2f) {
                    if(index + 1 < length) {
                        if(contents[index + 1] == 0x2f) {
                            // checks for a single line comment
                            index = index + 2;
                            while(index < length) {
                                if(contents[index] == 0xa) {
                                    break;
                                }
                                index = index + 1;
                            }
                            tokens.add(create_simple_token(TokenComment, start, index));
                            continue;
                        }else => if(contents[index + 1] == 0x2a) {
                            // checks for a multi line comment
                            index = index + 2;
                            bool finished = false;
                            while(index + 1 < length) {
                                if(contents[index] == 0x2a) {
                                    if(contents[index + 1] == 0x2f) {
                                        finished = true;
                                        index = index + 2;
                                        break;
                                    }
                                }
                                index = index + 1;
                            }
                            if(finished == false) {
                                tokens.add(create_simple_token(TokenInvalid, start, index));
                                errors.add_error(1008, start, start+2, FORMAT_HIGHLIGHT);
                                break;
                            }
                            tokens.add(create_simple_token(TokenComment, start, index));
                            continue;
                        }
                    }
                }else => if(contents[index] == 0x3b) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenSemicolon, start, index));
                    continue;
                }else => if(contents[index] == 0x2b) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenPlus, start, index));
                    continue;
                }else => if(contents[index] == 0x2d) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenMinus, start, index));
                    continue;
                }else => if(contents[index] == 0x5b) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenBracketLeft, start, index));
                    continue;
                }else => if(contents[index] == 0x5d) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenBracketRight, start, index));
                    continue;
                }else => if(contents[index] == 0x7b) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenBraceRight, start, index));
                    continue;
                }else => if(contents[index] == 0x7d) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenBraceRight, start, index));
                    continue;
                }else => if(contents[index] == 0x28) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenParenthesisLeft, start, index));
                    continue;
                }else => if(contents[index] == 0x29) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenParenthesisRight, start, index));
                    continue;
                }else => if(contents[index] == 0x2e) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenDot, start, index));
                    continue;
                }else => if(contents[index] == 0x2c) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenComma, start, index));
                    continue;
                }else => if(contents[index] == 0x7c) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenOr, start, index));
                    continue;
                }else => if(contents[index] == 0x26) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenAnd, start, index));
                    continue;
                }else => if(contents[index] == 0x2a) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenMultiply, start, index));
                    continue;
                }else => if(contents[index] == 0x2f) {
                    index = index + 1;
                    tokens.add(create_simple_token(TokenDivide, start, index));
                    continue;
                }else => if(contents[index] == 0x3d) {
                    if(index + 1 < length) {
                        if(contents[index + 1] == 0x3e) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenLineCode, start, index));
                            continue;
                        }else => if(contents[index + 1] == 0x3d) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenEquals, start, index));
                            continue;
                        }
                    }
                    index = index + 1;
                    tokens.add(create_simple_token(TokenAssign, start, index));
                    continue;
                }else => if(contents[index] == 0x21) {
                    if(index + 1 < length) {
                        if(contents[index + 1] == 0x3d) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenNotEquals, start, index));
                            continue;
                        }
                    }
                    index = index + 1;
                    tokens.add(create_simple_token(TokenNot, start, index));
                    continue;
                }else => if(contents[index] == 0x3c) {
                    if(index + 1 < length) {
                        if(contents[index + 1] == 0x3c) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenBitShiftLeft, start, index));
                            continue;
                        }else => if(contents[index + 1] == 0x3d) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenLessEqual, start, index));
                            continue;
                        }
                    }
                    index = index + 1;
                    tokens.add(create_simple_token(TokenLessThan, start, index));
                    continue;
                }else => if(contents[index] == 0x3e) {
                    if(index + 1 < length) {
                        if(contents[index + 1] == 0x3e) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenBitShiftRight, start, index));
                            continue;
                        }else => if(contents[index + 1] == 0x3d) {
                            index = index + 2;
                            tokens.add(create_simple_token(TokenGreaterEqual, start, index));
                            continue;
                        }
                    }
                    index = index + 1;
                    tokens.add(create_simple_token(TokenGreaterThan, start, index));
                    continue;
                }
                // either unknown or actually a token like ; ( ) + - ,
                errors.add_error(1007, start, start+1, FORMAT_HIGHLIGHT);
                tokens.add(create_simple_token(TokenInvalid, start, index+1));
            }
        }
        index = index + 1;
    }
    return tokens;
}