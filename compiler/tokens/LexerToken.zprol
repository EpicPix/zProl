namespace zprol.compiler.tokens;

using zprol.compiler.tokens;
using zprol.lang.memory;

class StringToken {
    uint64 type;
    uint64 start;
    uint64 end;
    String string;
}

Token create_string_token(uint64 type, uint64 start, uint64 end, String str) {
    StringToken t = (StringToken!) malloc(32);
    t.type = type;
    t.start = start;
    t.end = end;
    t.string = str;
    return (Token!) t;
}

uint32 get_token_type_word(byte[] start, ulong len) {
    if(string_compare_bytes("namespace", start, len)) => return TokenNamespace;
    if(string_compare_bytes("using", start, len)) => return TokenUsing;
    if(string_compare_bytes("class", start, len)) => return TokenClass;
    if(string_compare_bytes("return", start, len)) => return TokenReturn;
    if(string_compare_bytes("if", start, len)) => return TokenIf;
    if(string_compare_bytes("else", start, len)) => return TokenElse;
    if(string_compare_bytes("while", start, len)) => return TokenWhile;
    if(string_compare_bytes("break", start, len)) => return TokenBreak;
    if(string_compare_bytes("continue", start, len)) => return TokenContinue;
    if(string_compare_bytes("true", start, len)) => return TokenTrue;
    if(string_compare_bytes("false", start, len)) => return TokenFalse;
    if(string_compare_bytes("null", start, len)) => return TokenNull;
    if(string_compare_bytes("void", start, len)) => return TokenVoid;
    if(string_compare_bytes("bool", start, len)) => return TokenBool;
    if(string_compare_bytes("native", start, len)) => return TokenNative;
    if(string_compare_bytes("const", start, len)) => return TokenConst;
    return TokenIdentifier;
}

const uint32 TokenIdentifier = 0x0001;
const uint32 TokenNumber = 0x0002;
const uint32 TokenString = 0x0003;
const uint32 TokenWhitespace = 0x0004;
const uint32 TokenComment = 0x0005;

const uint32 TokenNamespace = 0x0006;
const uint32 TokenUsing = 0x0007;
const uint32 TokenClass = 0x0008;
const uint32 TokenReturn = 0x0009;
const uint32 TokenIf = 0x000a;
const uint32 TokenElse = 0x000b;
const uint32 TokenWhile = 0x000c;
const uint32 TokenBreak = 0x000d;
const uint32 TokenContinue = 0x000e;
const uint32 TokenTrue = 0x000f;
const uint32 TokenFalse = 0x0010;
const uint32 TokenNull = 0x0011;
const uint32 TokenVoid = 0x0012;
const uint32 TokenBool = 0x0013;
const uint32 TokenNative = 0x0014;
const uint32 TokenConst = 0x0015;

const uint32 TokenSemicolon = 0x0016;
const uint32 TokenPlus = 0x0017;
const uint32 TokenMinus = 0x0018;
const uint32 TokenBracketLeft = 0x0019;
const uint32 TokenBracketRight = 0x001a;
const uint32 TokenBraceLeft = 0x001b;
const uint32 TokenBraceRight = 0x001c;
const uint32 TokenParenthesisLeft = 0x001d;
const uint32 TokenParenthesisRight = 0x001e;
const uint32 TokenDot = 0x001f;
const uint32 TokenComma = 0x0020;
const uint32 TokenEquals = 0x0021;
const uint32 TokenNotEquals = 0x0022;
const uint32 TokenLineCode = 0x0023;
const uint32 TokenAssign = 0x0024;
const uint32 TokenNot = 0x0025;
const uint32 TokenLessThan = 0x0026;
const uint32 TokenLessEqual = 0x0027;
const uint32 TokenBitShiftLeft = 0x0028;
const uint32 TokenGreaterThan = 0x0029;
const uint32 TokenGreaterEqual = 0x002a;
const uint32 TokenBitShiftRight = 0x002b;
const uint32 TokenOr = 0x002c;
const uint32 TokenAnd = 0x002d;
const uint32 TokenMultiply = 0x002e;
const uint32 TokenDivide = 0x002f;
