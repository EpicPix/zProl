namespace zprol.lang.collection;

using zprol.lang.memory;

class List {

    uint64 usedLength;
    uint64 usableLength;
    uint64[] pointer;

    void add(uint64 element) {
        if(usedLength + 1 > usableLength) {
            resize(usableLength * 2);
        }
        pointer[usedLength] = element;
        usedLength = usedLength + 1;
    }

    void removeIndex(uint64 index) {
        usedLength = usedLength - 1;
        uint64 currentIndex = index;
        while(currentIndex < usedLength) {
            pointer[currentIndex] = pointer[currentIndex + 1];
            currentIndex = currentIndex + 1;
        }
    }

    void removeElement(uint64 element) => removeIndex(indexOf(element));

    uint64 indexOf(uint64 element) {
        uint64 index = 0;
        while(index < usedLength) {
            if(pointer[index] == element) {
                return index;
            }
            index = index + 1;
        }
        return 0xffffffffffffffff;
    }

    void resize(uint64 length) {
        uint64[] newPointer = (uint64[]!) malloc(length * 8);
        uint64 index = 0;
        while(index < usedLength) {
            newPointer[index] = pointer[index];
            index = index + 1;
        }
        usableLength = length;
        free((byte[]!) pointer);
        pointer = newPointer;
    }

    uint64 get(uint64 index) {
        return pointer[index];
    }

}

List List_new() => return List_new(8);

List List_new(uint64 length) {
    List inst = (List!) malloc(24);
    inst.pointer = (uint64[]!) malloc(length * 8);
    inst.usableLength = length;
    inst.usedLength = 0;
    return inst;
}