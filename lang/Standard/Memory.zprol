namespace zprol.lang.memory;

using zprol.lang.linux.amd64;
using zprol.lang.collection;
using zprol.lang;

class _BinElement {
    ubyte binType;
}

class _QuickBinElement { // 25 bytes total
    ubyte binType;
    _QuickBinElement next;
    _QuickBinElement prev;
    bool nextBlockFree;
}

class _mmapedBinElement { // 17 bytes total
    ubyte binType;
    uint64 length;
    uint64 mmapedLength;
}

class mmapedArea { // 24 bytes total
    _bigBinElement startElement;
    ulong mmapStart;
    ulong size;
}

class _bigBinElement { // 26 bytes total
    ubyte binType;
    ubyte flags;
    // xxxx xxx1 - previous element is available
    // xxxx xx1x - element is freed

    ulong length;
    _bigBinElement next;
    _bigBinElement prev;
}

List quickBinList;
List mmapedList;

byte[] malloc(ulong length) {
    if(length <= 64) {
        if(quickBinList == null) {
            quickBinList = (List!) mmap_alloc(4096);
            quickBinList.pointer = (uint64[]!) ((uint64!) quickBinList + 24);
            quickBinList.usedLength = 0;
            quickBinList.usableLength = 509;
            _QuickBinElement quickBin = (_QuickBinElement!) mmap_alloc(32768);
            quickBin.nextBlockFree = true;
            quickBinList.add((ulong!) quickBin);
            // first element is never actually used
        }
        _QuickBinElement useElement = null;
        ulong index = 0;
        while(index < quickBinList.usedLength) {
            _QuickBinElement start = (_QuickBinElement!) quickBinList.get(index);
            _QuickBinElement element = start;
//            stdout("1\n");
            while(element.nextBlockFree == false) {
                if(element.next == null) => break;
                element = element.next;
            }
            if((ulong!) element + 96 <= (ulong!) start + 32768) {
                useElement = element;
                break;
            }else => if(index == quickBinList.usedLength - 1) {
                _QuickBinElement quickBin = (_QuickBinElement!) mmap_alloc(32768);
                quickBin.nextBlockFree = true;
                quickBinList.add((ulong!) quickBin);
            }
            index = index + 1;
        }

        _QuickBinElement thisElement = (_QuickBinElement!) ((uint64!) useElement + 64 + 32);
        thisElement.binType = 0;
        thisElement.nextBlockFree = true;
        useElement.nextBlockFree = false;
        if(useElement.next != null) {
            thisElement.next = useElement.next;
            useElement.next.prev = thisElement;
        }
        useElement.next = thisElement;
        thisElement.prev = useElement;
        return (byte[]!) ((uint64!) thisElement + 32);
    }else => if(length >= 0x10000) {
        uint64 mmapedLength = (length + 0xffff + 32) & 0xFFFFFFFFFFFF0000;
        _mmapedBinElement thisElement = (_mmapedBinElement!) mmap_alloc(mmapedLength);
        thisElement.binType = 1;
        thisElement.length = length;
        thisElement.mmapedLength = mmapedLength;
        return (byte[]!) ((uint64!) thisElement + 32);
    }else {
        if(mmapedList == null) => mmapedList = List_new(4);
        long index = 0;
        while(index < mmapedList.usedLength) {
            mmapedArea area = (mmapedArea!) mmapedList.get(index);
            _bigBinElement current = area.startElement;
            while(current != null) {
                if((current.flags & 0x02) != 0) {
                    _bigBinElement check = current;
                    ulong usedAmount = 32 + length;
                    if((ulong!) check + usedAmount <= area.mmapStart + area.size) {
                        if(current.next != null) => if((ulong!) check + usedAmount >= (ulong!) current.next) {
                            current = current.next;
                            continue;
                        }
                        check.flags = check.flags & 0xfd;
                        bool canFragment = (ulong!) check + (ulong)64 + usedAmount <= area.mmapStart + area.size;
                        if(canFragment) {
                            _bigBinElement fragment = check;
                            check = (_bigBinElement!) ((ulong!) check + check.length - usedAmount);
                            fragment.binType = 2;
                            fragment.next = check;
                            check.prev = fragment;
                            fragment.length = fragment.length - usedAmount;
                            fragment.flags = 0x02;
                            if(fragment.prev != null) {
                                fragment.prev.next = fragment;
                                if((fragment.prev.flags & 0x02) != 0) => fragment.flags = fragment.flags | 0x01;
                            }
                            if((fragment.flags & 0x02) != 0) => check.flags = check.flags | 0x01;
                            if(check.next != null) => check.next.prev = check;
                        }else {
                            if(check.prev != null) => check.prev.next = check;
                            if(check.next != null) => check.next.flags = check.next.flags & 0xfe;
                        }
                        check.binType = 2;
                        check.length = length;
                        return (_bigBinElement!) ((ulong!) check + 32);
                    }
                }else => if((current.flags & 0x01) != 0) {
                    _bigBinElement check = current.prev;
                    ulong usedAmount = 32 + length;
                    if((ulong!) check + usedAmount <= area.mmapStart + area.size) {
                        if((ulong!) check + usedAmount < (ulong!) current) {
                            check.flags = check.flags & 0xfc;
                            if(check.prev != null) {
                                check.prev.next = check;
                                if((check.prev.flags & 0x02) != 0) => check.flags = check.flags | 0x01;
                            }
                            check.next = current;
                            current.prev = check;
                            check.length = length;
                            current.flags = current.flags & 0xfe;
                            check.binType = 2;
                            return (_bigBinElement!) ((ulong!) check + 32);
                        }
                    }
                }
                current = current.next;
            }
            index = index + 1;
        }

        mmapedArea area = (mmapedArea!) malloc(24);
        area.size = 0x40000;
        area.mmapStart = (ulong!) mmap_alloc(0x40000);
        _bigBinElement element = (_bigBinElement!) area.mmapStart;
        element.binType = 2;
        element.flags = 0x02;
        element.length = area.size;
        element.next = null;
        element.prev = null;
        area.startElement = element;
        mmapedList.add((uint64!) area);
        return malloc(length);
    }
    return null; // unreachable
}

void free(byte[] location) {
    _BinElement element = (_BinElement!) ((uint64!) location - 32);
    if(element.binType == 0) {
        _QuickBinElement qElement = (_QuickBinElement!) element;
        if(qElement.prev != null) {
            qElement.prev.next = qElement.next;
            qElement.prev.nextBlockFree = true;
        }
        if(qElement.next != null) {
            qElement.next.prev = qElement.prev;
        }
    }else => if(element.binType == 1) {
        _mmapedBinElement mElement = (_mmapedBinElement!) element;
        munmap((uint64!) mElement, mElement.mmapedLength);
    }else => if(element.binType == 2) {
        _bigBinElement bElement = (_bigBinElement!) element;
        bElement.flags = bElement.flags | 0x02;
        if(bElement.next != null) {
            bElement.next = bElement.next.next;
            if(bElement.next.next != null) => bElement.next.next.prev = bElement;
            bElement.length = bElement.length + 32 + bElement.next.length;
        }
        if((bElement.flags & 0x01) != 0) {
            if(bElement.next != null) => bElement.next.prev = bElement.prev;
            bElement.prev.next = bElement.next;
            bElement.prev.length = bElement.prev.length + 32 + bElement.length;
        }
    }
}

byte[] mmap_alloc(uint64 length) => return mmap(0, length, PROT_READ() | PROT_WRITE(), MAP_PRIVATE() | MAP_ANONYMOUS(), 0, 0);

byte[] mmap(uint64 addr, uint64 length, uint64 protection, uint64 flags, uint64 fd, uint64 offset) =>
    return (byte[]!) syscall(SYSCALL_MMAP(), addr, length, protection, flags, fd, offset);

void munmap(uint64 addr, uint64 length) => syscall(SYSCALL_MUNMAP(), addr, length);

int64 PROT_READ() => return 1;
int64 PROT_WRITE() => return 2;

int64 MAP_PRIVATE() => return 2;
int64 MAP_SHARED() => return 4;
int64 MAP_ANONYMOUS() => return 32;