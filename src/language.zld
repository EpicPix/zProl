// Definitions of stuff in this language

// Keywords
keyword import
keyword export
keyword field
keyword object
keyword typedef
keyword structure

// Function Keywords
keyword if
keyword else
keyword while
keyword return

// Flags
keyword internal
keyword static
keyword final

// Types
type void false 0 false
type int8 false 1 false
type int16 false 2 false
type int32 false 4 false
type int64 false 8 false
type uint8 true 1 false
type uint16 true 2 false
type uint32 true 4 false
type uint64 true 8 false
type pointer true 8 true

define parameter @type@ @word@ @end@
define parameterc @type@ @word@ , @end@
define structurein @type@ @word@ ; @end@
define callparameter @equation@ @end@
define callparameterc @equation@ , @end@

ghost Open {
ghost Close }

tok !InDefinition Typedef typedef @type@ @word@ ; @end@

tok !InDefinition FunctionEmpty @type@ @word@ ( ) @end@
tok !InDefinition FunctionParameters @type@ @word@ ( ^parameter ) @end@
tok !InDefinition FunctionParameters @type@ @word@ ( ^+parameterc ^parameter ) @end@

tok !InDefinition Structure structure @word@ { ^+structurein } @end@

tok !InDefinition Using using @dword@ ; @end@
tok !InDefinition Namespace namespace @dword@ ; @end@

tok InDefinition Return return ; @end@
tok InDefinition ReturnValue return @equation@ ; @end@

tok InDefinition Call @word@ ( ) ; @end@
tok InDefinition Call @word@ ( ^callparameter ) ; @end@
tok InDefinition Call @word@ ( ^+callparameterc ^callparameter ) ; @end@

context on Open push InDefinition
context on Close pop InDefinition