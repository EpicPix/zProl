// Definitions of stuff in this language

// Operators
operator 0 >>
operator 0 <<
operator 1 %
operator 1 +
operator 1 -
operator 2 *
operator 2 /
operator 2 %

// Keywords
keyword definition using
keyword definition namespace
keyword control return
keyword function_modifier native

// Types, also defined as keywords
type void size=0 V

type int8 size=1 B
type byte size=1 B
type int16 size=2 S
type short size=2 S
type int32 size=4 I
type int size=4 I
type int64 size=8 L
type long size=8 L

type uint8 unsigned,size=1 uB
type ubyte unsigned,size=1 uB
type uint16 unsigned,size=2 uS
type ushort unsigned,size=2 uS
type uint32 unsigned,size=4 uI
type uint unsigned,size=4 uI
type uint64 unsigned,size=8 uL
type ulong unsigned,size=8 uL

type pointer unsigned,size=8,pointer P

def Expression:
  $ExpressionCallables [$ExpressionType]

def ExpressionParenthesis:
  ( $ExpressionCallables $ExpressionType )

def inline ExpressionType:
  $Operator $ExpressionCallables [$ExpressionType]

def inline ExpressionCallables:
  $Number
  $ExpressionParenthesis
  $FunctionCall
  $Identifier

def chars Identifier < a-z A-Z _ > { < a-z A-Z 0-9 _ > }
def inline Type @type@
def inline DotWord @dword@
def inline Number @number@
def inline Operator @operator@

tok Using:
  using $DotWord ;

tok Namespace:
  namespace $DotWord ;

def Return:
  return $Expression
  return

def Argument:
  $Expression

def ArgumentList:
  $Argument {, $Argument}

def FunctionCall:
  $Identifier ( [$ArgumentList] )

def Parameter:
  $Type $Identifier

def ParameterList:
  $Parameter {, $Parameter}

def inline keyword FunctionModifier:
  native

def FunctionModifiers:
  { $FunctionModifier }

def Statement:
  $Return
  $FunctionCall

def Code:
  \{ {$Statement ;} \}
  => $Statement ;

tok Function:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;