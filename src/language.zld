// Definitions of stuff in this language

// Operators
operator 0 |
operator 1 >>
operator 1 <<
operator 2 %
operator 2 +
operator 2 -
operator 3 *
operator 3 /
operator 3 %

// Keywords
keyword definition using
keyword definition namespace
keyword definition class
keyword control return
keyword function_modifier native

// Types, also defined as keywords
type void size=0 V

type int8 size=1 B
type byte size=1 B
type int16 size=2 S
type short size=2 S
type int32 size=4 I
type int size=4 I
type int64 size=8 L
type long size=8 L

type uint8 unsigned,size=1 uB
type ubyte unsigned,size=1 uB
type uint16 unsigned,size=2 uS
type ushort unsigned,size=2 uS
type uint32 unsigned,size=4 uI
type uint unsigned,size=4 uI
type uint64 unsigned,size=8 uL
type ulong unsigned,size=8 uL

type pointer unsigned,size=8,pointer P

def Expression:
  $ExpressionCallables [$ExpressionType]

def ExpressionParenthesis:
  ( $ExpressionCallables $ExpressionType )

def inline ExpressionType:
  [$Whitespace] $Operator $ExpressionCallables [$ExpressionType]

def Assignment:
  $Identifier = $Expression

def inline ExpressionCallables:
  $Integer
  $ExpressionParenthesis
  $FunctionCall
  $Assignment
  $Identifier
  $String

def inline Integer:
  [$Whitespace] $DecimalInteger

def chars DecimalInteger:
  0
  $NonZeroDecimalDigit { $DecimalDigits }

def chars NonZeroDecimalDigit <1-9>
def chars DecimalDigits <0-9>

def chars IdentifierChars <a-zA-Z_> { <a-zA-Z0-9_> }
def chars Identifier [$Whitespace] $IdentifierChars
def chars Type [$Whitespace] { $IdentifierChars <.> } $IdentifierChars
def chars clean Whitespace < \t\n> { < \t\n> }
def chars StringChars <^\n"> { <^\n"> }
def String " $StringChars "
def chars DotWord [$Whitespace] <a-zA-Z_> { <a-zA-Z0-9_.> }
def chars Operator:
  <\>\>>
  <<<>
  <%>
  <+>
  <->
  <*>
  </>
  <%>
  <|>

tok Using:
  using $DotWord ;

tok Namespace:
  namespace $DotWord ;

def ReturnStatement:
  return $Expression ;
  return ;

def Argument:
  $Expression

def ArgumentList:
  $Argument {, $Argument}

def FunctionCall:
  $Identifier ( [$ArgumentList] )

def Parameter:
  $Type $Identifier

def ParameterList:
  $Parameter {, $Parameter}

def inline keyword FunctionModifier:
  native

def FunctionModifiers:
  { $FunctionModifier $Whitespace }

def FunctionCallStatement:
  $Identifier ( [$ArgumentList] ) ;

def AssignmentStatement:
  $Identifier = $Expression ;

def CreateAssignmentStatement:
  $Type $Identifier = $Expression ;

def Statement:
  $ReturnStatement
  $FunctionCallStatement
  $AssignmentStatement
  $CreateAssignmentStatement

def inline chars LineCodeChars [$Whitespace] <=> <\>>

def Code:
  \{ {$Statement} \}
  $LineCodeChars $Statement

tok Function:
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) $Code
  $FunctionModifiers $Type $Identifier ( [$ParameterList] ) ;

def ClassField:
  $Type $Identifier ;

tok Class:
  class $Type \{ {$ClassField} \}